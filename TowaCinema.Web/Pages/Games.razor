@page "/games"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using TowaCinema.Web.Shared.ModelWindows.Game
@inject IJSRuntime JsRuntime
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Игры - @ClientVariables.PageTitleEnding</PageTitle>

<TopBar PageTitle="Игры"/>
<div class="games-container">
    <div class="games-list">
        @if (_gamesInfo is not null)
        {
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <div class="games-top-bar">
                        <button class="games-create-button" @onclick="@(() => _isModalCreateGameVisible = true)">
                            Добавить
                            игру
                        </button>
                    </div>
                </Authorized>
            </AuthorizeView>
            @if (_gamesInfo.Count > 0)
            {
                <div class="games-list-wrapper" @onscroll="OnScroll" tabindex="-1">
                    <div class="games-list-library">
                        @foreach (var game in _gamesInfo)
                        {
                            <div class="game-card-container">
                                <div class="game-card">
                                    <div class="game-card-background">
                                        <div class="game-card-background-shape-1"></div>
                                    </div>
                                    <div class="game-thumbnail">
                                        <a href="@GetUrl(game)">
                                            <div class="game-thumbnail-placeholder">
                                                <div class="game-thumbnail-placeholder-background"></div>
                                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960">
                                                    <path d="M182-200q-51 0-79-35.5T82-322l42-300q9-60 53.5-99T282-760h396q60 0 104.5 39t53.5 99l42 300q7 51-21 86.5T778-200q-21 0-39-7.5T706-230l-90-90H344l-90 90q-15 15-33 22.5t-39 7.5Zm16-86 114-114h336l114 114q2 2 16 6 11 0 17.5-6.5T800-304l-44-308q-4-29-26-48.5T678-680H282q-30 0-52 19.5T204-612l-44 308q-2 11 4.5 17.5T182-280q2 0 16-6Zm482-154q17 0 28.5-11.5T720-480q0-17-11.5-28.5T680-520q-17 0-28.5 11.5T640-480q0 17 11.5 28.5T680-440Zm-80-120q17 0 28.5-11.5T640-600q0-17-11.5-28.5T600-640q-17 0-28.5 11.5T560-600q0 17 11.5 28.5T600-560ZM310-440h60v-70h70v-60h-70v-70h-60v70h-70v60h70v70Zm170-40Z"/>
                                                </svg>
                                            </div>
                                            <img src="@(new Uri(new Uri(ClientVariables.ExternalServerUrl), $"archive/thumbnails/game/{game.Id.ToString()}/md"))"
                                                 alt="">
                                        </a>
                                        <div class="game-streams-counter">
                                            <div class="game-streams-counter-background">
                                                <span class="game-streams-count">Стримов: @game.StreamsCount</span>
                                            </div>
                                        </div>
                                        <AuthorizeView Roles="Admin">
                                            <Authorized>
                                                <div class="game-edit-button" @onclick="@(() => ShowEditModal(game))">
                                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960">
                                                        <path d="M200-200h57l391-391-57-57-391 391v57Zm-80 80v-170l528-527q12-11 26.5-17t30.5-6q16 0 31 6t26 18l55 56q12 11 17.5 26t5.5 30q0 16-5.5 30.5T817-647L290-120H120Zm640-584-56-56 56 56Zm-141 85-28-29 57 57-29-28Z"/>
                                                    </svg>
                                                </div>
                                            </Authorized>
                                        </AuthorizeView>
                                    </div>
                                    <div class="game-info">
                                        <div class="game-card-background-shape-2"></div>
                                        <div class="game-card-background-shape-3"></div>
                                        <a href="@GetUrl(game)">
                                            <div class="game-info-title">
                                                <p>@game.Title</p>
                                            </div>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="loader-container">
                    <div class="loader-error">🐸</div>
                    <div class="loader-title">
                        <p>На моих кувшинках нет ни одной игры</p>
                    </div>
                </div>
            }
        }
        else
        {
            @if (_isError)
            {
                <div class="loader-error-container">
                    <div class="loader-error">🐸</div>
                    <div class="loader-error-title">
                        <p>Я не могу найти свои кувшинки :(</p>
                        <p>Сервер недоступен</p>
                    </div>
                </div>
            }
            else
            {
                <div class="loader-container">
                    <div class="loader"></div>
                    <div class="loader-title">
                        <p>Идёт получение данных стримов с кувшинок...</p>
                    </div>
                </div>
            }
        }
    </div>
    @if (_isModalCreateGameVisible)
    {
        <ModalCreateGame OnClose="@ModalWindowClosed"></ModalCreateGame>
    }
    @if (_isModalEditGameVisible && _gameToEdit is not null)
    {
        <ModalEditGame GameInfoModel="_gameToEdit" OnClose="@ModalWindowClosed"></ModalEditGame>
    }
</div>

@code
{
    private bool _isError;
    private bool _isModalCreateGameVisible;
    private bool _isModalEditGameVisible;

    private GameInfoModel? _gameToEdit;
    private IJSObjectReference? _scrollScript;
    private readonly string _positionKey = "games_scroll_position";

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationState { get; set; }

    private List<GameInfoModel>? _gamesInfo;

    protected override async Task OnInitializedAsync()
    {
        await GetGamesInfo();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && _scrollScript is null)
        {
            _scrollScript = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "/js/archive-1.js");
            var position = await ProtectedSessionStore.GetAsync<int>(_positionKey);
            if (position.Success)
            {
                await _scrollScript.InvokeVoidAsync("setScrollPosition", ".games-list-wrapper", position.Value);
            }
        }
    }

    private async Task GetGamesInfo()
    {
        try
        {
            using var client = new HttpClient();
            var data = await client.GetStringAsync(new Uri(new Uri(ClientVariables.InternalServerUrl), $"archive/games?admin={IsAdmin()}"));
            _gamesInfo = JsonConvert.DeserializeObject<List<GameInfoModel>?>(data, new IsoDateTimeConverter
            {
                DateTimeFormat = "dd.MM.yyyy"
            });

            _gamesInfo = _gamesInfo?.OrderBy(o => o.Title).ToList();

            StateHasChanged();
        }
        catch
            (Exception e)
        {
            _isError = true;
            Console.WriteLine(e.Message);
        }
    }

    private bool IsAdmin()
    {
        return AuthenticationState is not null && AuthenticationState.Result.User.IsInRole("Admin");
    }

    private async Task ModalWindowClosed(bool isSuccess)
    {
        _isModalCreateGameVisible = false;
        _isModalEditGameVisible = false;
        _gameToEdit = null;

        if (isSuccess)
        {
            await GetGamesInfo();
        }
    }

    private void ShowEditModal(GameInfoModel selectedGameInfoModel)
    {
        _gameToEdit = new GameInfoModel
        {
            Id = selectedGameInfoModel.Id,
            Title = selectedGameInfoModel.Title
        };
        _isModalEditGameVisible = true;
    }

    private static string GetUrl(GameInfoModel game)
    {
        return $"/games/{game.Id.ToString()}/streams";
    }

    private async Task OnScroll()
    {
        if (_scrollScript is not null)
        {
            var scrollPosition = await _scrollScript.InvokeAsync<int>("getScrollPosition", ".games-list-wrapper");
            await ProtectedSessionStore.SetAsync(_positionKey, scrollPosition);
        }
    }
}