@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Forms
@using Newtonsoft.Json
<div class="modal">
    <div class="modal-bg"></div>
    <div class="modal-window">
        <div class="modal-window-title">
            <p>Изменение игры</p>
        </div>
        <div class="modal-separator"></div>
        <div class="modal-window-main">
            <div class="modal-element">
                <p class="modal-element-title">Название игры:</p>
                <input type="text" class="modal-text-input" @bind-Value="@GameInfoModel.Title"
                       @bind-Value:event="oninput"/>
            </div>
            <div class="modal-element">
                <p class="modal-element-title">Превью игры:</p>
                <div class="modal-element-thumbnail-image">
                    <img src="@(new Uri(new Uri(ClientVariables.ExternalServerUrl), $"archive/thumbnails/game/{GameInfoModel.Id}/sm"))"
                         alt="">
                    <button class="modal-element-thumbnail-change" @onclick="@SwitchThumbnailEditMode">
                        @if (_isNewThumbnail)
                        {
                            <span>Отменить</span>
                        }
                        else
                        {
                            <span>Изменить превью</span>
                        }
                    </button>
                </div>
            </div>
            @if (_isNewThumbnail)
            {
                <div class="modal-element">
                    <p class="modal-element-title">Новый файл превью игры:</p>
                    <InputFile class="modal-file-input" OnChange="@OnChangeFileInput"/>
                </div>
            }
        </div>
        <div class="modal-separator"></div>
        @if (!string.IsNullOrWhiteSpace(_responseErrorMessage))
        {
            <div class="modal-element-error">
                <span>@($"* {_responseErrorMessage}")</span>
            </div>
            <div class="modal-separator"></div>
        }
        <div class="modal-buttons">
            <button class="modal-button" disabled="@IsDisabled" @onclick="@SaveChanges">
                <span>Сохранить</span>
            </button>
            <button class="modal-button" @onclick="@(() => CloseModalWindow(false))">
                <span>Отменить</span>
            </button>
        </div>
    </div>
</div>

@code {
    private IBrowserFile? _gameThumbnailImage;
    private bool _isDisabled;
    private bool _isNewThumbnail;

    private bool IsDisabled => string.IsNullOrWhiteSpace(GameInfoModel.Title) || (_isNewThumbnail && _gameThumbnailImage is null) || _isDisabled;

    private string? _responseErrorMessage;

    [Parameter] public required GameInfoModel GameInfoModel { get; set; }

    [Parameter] public EventCallback<bool> OnClose { get; set; }

    private async Task CloseModalWindow(bool isSuccess)
    {
        await OnClose.InvokeAsync(isSuccess);
    }

    private void OnChangeFileInput(InputFileChangeEventArgs arg)
    {
        _gameThumbnailImage = arg.File;
    }

    private void SwitchThumbnailEditMode()
    {
        _isNewThumbnail = !_isNewThumbnail;
        _gameThumbnailImage = null;
    }

    private async Task SaveChanges()
    {
        _isDisabled = true;
        _responseErrorMessage = null;

        using var formData = new MultipartFormDataContent();

        var gameInfo = new StringContent(JsonConvert.SerializeObject(GameInfoModel), new MediaTypeHeaderValue("application/json"));

        formData.Add(gameInfo, "GameInfo");

        if (_gameThumbnailImage is not null)
        {
            const int maxFileSize = 1024 * 1024 * 10;
            var thumbnailFile =
                new StreamContent(_gameThumbnailImage.OpenReadStream(maxFileSize));

            thumbnailFile.Headers.ContentType =
                new MediaTypeHeaderValue(_gameThumbnailImage.ContentType);

            formData.Add(thumbnailFile, "ThumbnailFile", _gameThumbnailImage.Name);
        }

        try
        {
            using var httpClient = new HttpClient();
            var response = await httpClient.PutAsync(new Uri(new Uri(ClientVariables.InternalServerUrl), "archive/games"), formData);

            if (response.IsSuccessStatusCode)
            {
                await CloseModalWindow(true);
            }

            _responseErrorMessage = await response.Content.ReadAsStringAsync();
            _isDisabled = false;
        }
        catch
            (Exception)
        {
            _responseErrorMessage = "При попытке отправки данных на сервер возникли проблемы";
            _isDisabled = false;
        }
    }

}